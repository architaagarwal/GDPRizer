select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select name, value, data from Settings
select ContactInfo.contactDbId, Conferences.confid, roles, password from ContactInfo left join Conferences on (Conferences.`dbname`=PLACEHOLDER) left join Roles on (Roles.contactDbId=ContactInfo.contactDbId and Roles.confid=Conferences.confid) where email=PLACEHOLDER
select * from ContactInfo where email=PLACEHOLDER
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where leadContactId=u.contactId and conflictType is null) numLeads, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where shepherdContactId=u.contactId and conflictType is null) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, r.overAllMerit, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) left join ReviewRating rr on (rr.paperId=r.paperId and rr.reviewId=r.reviewId) where (pc.conflictType is null or pc.conflictType=0 or r.contactId=PLACEHOLDER) and (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select count(reviewId) num_submitted, overAllMerit scores from ContactInfo left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.reviewSubmitted is not null) where roles!=0 and (roles&1)!=0 group by ContactInfo.contactId
select (select max(conflictType) from PaperConflict where contactId=PLACEHOLDER), (select paperId from PaperReview where contactId=PLACEHOLDER limit 1)
select PaperReview.*, ContactInfo.firstName, ContactInfo.lastName, ContactInfo.email, ContactInfo.roles as contactRoles, ContactInfo.contactTags, ReqCI.firstName as reqFirstName, ReqCI.lastName as reqLastName, ReqCI.email as reqEmail, (select rating from ReviewRating where paperId=PaperReview.paperId and reviewId=PaperReview.reviewId) allRatings, (select rating from ReviewRating where paperId=PaperReview.paperId and reviewId=PaperReview.reviewId and contactId=PLACEHOLDER) myRating from PaperReview join ContactInfo using (contactId) left join ContactInfo as ReqCI on (ReqCI.contactId=PaperReview.requestedBy) where PaperReview.paperId=PLACEHOLDER group by PaperReview.reviewId order by PaperReview.paperId, reviewOrdinal, timeRequested, reviewType desc, reviewId
select infoJson from PaperStorage where paperId=PLACEHOLDER and paperStorageId=PLACEHOLDER
select (select max(conflictType) from PaperConflict where contactId=PLACEHOLDER), (select paperId from PaperReview where contactId=PLACEHOLDER or reviewTokenPLACEHOLDERa limit 1)
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.*, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join ReviewRating rr on (rr.paperId=r.paperId and rr.reviewId=r.reviewId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.*, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join ReviewRating rr on (rr.reviewId=r.reviewId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select outcome, count(paperId) from Paper where timeSubmitted>0 or (timeSubmitted=PLACEHOLDER and timeWithdrawn>=PLACEHOLDER) group by outcome
select firstName, lastName, affiliation, email, contactId, roles, contactTags, disabled from ContactInfo where roles!=0 and (roles&1)!=0
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, topicIds, topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, leadPaperIds, numLeads, shepherdPaperIds, numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select contactId, topicId as topicIds, interest as topicInterest from TopicInterest group by contactId) as ti on (ti.contactId=u.contactId) left join (select r.*, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join ReviewRating rr on (rr.reviewId=r.reviewId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) left join (select p.leadContactId, p.paperId as leadPaperIds, count(p.paperId) as numLeads from Paper p where leadContactId is not null group by p.leadContactId) as lead on (lead.leadContactId=u.contactId) left join (select p.shepherdContactId, p.paperId as shepherdPaperIds, count(p.paperId) as numShepherds from Paper p where shepherdContactId is not null group by p.shepherdContactId) as shep on (shep.shepherdContactId=u.contactId) where (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, topicIds, topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, leadPaperIds, numLeads, shepherdPaperIds, numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select contactId, topicId as topicIds, interest as topicInterest from TopicInterest group by contactId) as ti on (ti.contactId=u.contactId) left join (select r.*, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join ReviewRating rr on (rr.reviewId=r.reviewId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) left join (select p.leadContactId, p.paperId as leadPaperIds, count(p.paperId) as numLeads from Paper p where leadContactId is not null group by p.leadContactId) as lead on (lead.leadContactId=u.contactId) left join (select p.shepherdContactId, p.paperId as shepherdPaperIds, count(p.paperId) as numShepherds from Paper p where shepherdContactId is not null group by p.shepherdContactId) as shep on (shep.shepherdContactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, topicIds, topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, leadPaperIds, numLeads, shepherdPaperIds, numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select contactId, topicId as topicIds, interest as topicInterest from TopicInterest group by contactId) as ti on (ti.contactId=u.contactId) left join (select r.*, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) left join ReviewRating rr on (rr.reviewId=r.reviewId and not (rr.reviewId in PLACEHOLDER)) where (pc.conflictType is null or pc.conflictType=0 or r.contactId=PLACEHOLDER) and (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) left join (select p.leadContactId, p.paperId as leadPaperIds, count(p.paperId) as numLeads from Paper p left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) where leadContactId is not null and (conflictType is null or conflictType=0) group by p.leadContactId) as lead on (lead.leadContactId=u.contactId) left join (select p.shepherdContactId, p.paperId as shepherdPaperIds, count(p.paperId) as numShepherds from Paper p left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) where shepherdContactId is not null and (conflictType is null or conflictType=0) group by p.shepherdContactId) as shep on (shep.shepherdContactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, PaperReviewPreference.preference as reviewerPreference, PaperReviewPreference.expertise as reviewerExpertise from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join PaperReviewPreference on (PaperReviewPreference.paperId=Paper.paperId and PaperReviewPreference.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select ContactInfo.contactId, firstName, lastName, email, password, contactTags, roles, defaultWatch, PaperReview.reviewType myReviewType, PaperReview.reviewSubmitted myReviewSubmitted, PaperReview.reviewNeedsSubmit myReviewNeedsSubmit, conflictType, watch, preferredEmail, disabled from ContactInfo left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=PLACEHOLDER and PaperWatch.contactId=ContactInfo.contactId) left join PaperReview on (PaperReview.paperId=PLACEHOLDER and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=PLACEHOLDER and PaperComment.contactId=ContactInfo.contactId) where watch is not null or conflictType>=PLACEHOLDER or reviewType is not null or commentId is not null or (defaultWatch & PLACEHOLDER)!=0 order by conflictType
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select contactId, conflictType from PaperConflict where paperId=PLACEHOLDER
select PaperComment.*, firstName reviewFirstName, lastName reviewLastName, email reviewEmail from PaperComment join ContactInfo on (ContactInfo.contactId=PaperComment.contactId) where PaperComment.paperId=PLACEHOLDER order by commentId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and PaperConflict.conflictType>=PLACEHOLDER group by Paper.paperId
select count(reviewSubmitted) num_submitted, count(if(reviewNeedsSubmit=0,reviewSubmitted,1)) num_needs_submit, reviewSubmitted scores, distinct unsubmitted_rounds from PaperReview join Paper using (paperId) where (PaperReview.contactId=PLACEHOLDER) and (reviewSubmitted is not null or timeSubmitted>0) group by PaperReview.reviewId>0
select ContactInfo.contactId, reviewType, commentId, conflictType, watch from ContactInfo left join PaperReview on (PaperReview.paperId=PLACEHOLDER and PaperReview.contactId=ContactInfo.contactId) left join PaperComment on (PaperComment.paperId=PLACEHOLDER and PaperComment.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=ContactInfo.contactId) left join PaperWatch on (PaperWatch.paperId=PLACEHOLDER and PaperWatch.contactId=ContactInfo.contactId) where ContactInfo.contactId=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and (PaperConflict.conflictType>=PLACEHOLDER or (Paper.timeWithdrawn<=0 and MyReview.reviewType is not null)) group by Paper.paperId
select MPR.reviewId from PaperReview as MPR left join (select paperId, count(reviewId) as numReviews from PaperReview where reviewType>1 and reviewNeedsSubmit=0 group by paperId) as NPR on (NPR.paperId=MPR.paperId) left join (select paperId, count(rating) as numRatings from PaperReview join ReviewRating using (paperId,reviewId) group by paperId) as NRR on (NRR.paperId=MPR.paperId) where MPR.contactId=PLACEHOLDER and numReviews<=PLACEHOLDER and numRatings<=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select PaperReview.*, ContactInfo.firstName, ContactInfo.lastName, ContactInfo.email, ContactInfo.roles as contactRoles, ContactInfo.contactTags, ReqCI.firstName as reqFirstName, ReqCI.lastName as reqLastName, ReqCI.email as reqEmail from PaperReview join ContactInfo using (contactId) left join ContactInfo as ReqCI on (ReqCI.contactId=PaperReview.requestedBy) where PaperReview.paperId=PLACEHOLDER group by PaperReview.reviewId order by PaperReview.paperId, reviewOrdinal, timeRequested, reviewType desc, reviewId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.title title, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.abstract abstract, Paper.authorInformation authorInformation, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((true) or (true) or (true)) and Paper.timeSubmitted>0 group by Paper.paperId
select r.reviewId from PaperReview r join Paper p on (p.paperId=r.paperId and p.timeSubmitted>0) where (r.contactId=PLACEHOLDER) and r.reviewNeedsSubmit!=0 limit 1
select Paper.paperId, reviewId, reviewType, reviewSubmitted, reviewModified, timeApprovalRequested, reviewNeedsSubmit, reviewRound, reviewOrdinal, timeRequested, PaperReview.contactId, lastName, firstName, email from Paper join PaperReview using (paperId) join ContactInfo on (PaperReview.contactId=ContactInfo.contactId) where paperIdPLACEHOLDERa
select topicId, topicName from TopicArea order by topicName
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, r.overAllMerit, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join ReviewRating rr on (rr.paperId=r.paperId and rr.reviewId=r.reviewId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select reviewId from PaperReview where reviewRound=0 limit 1
select firstName, lastName, '' affiliation, email, contactId from ContactInfo where contactIdPLACEHOLDERa
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select ContactInfo.contactId, conflictType, email, firstName, lastName, affiliation from PaperConflict join ContactInfo using (contactId) where paperId=PLACEHOLDER and conflictType>=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select ContactInfo.contactId, conflictType, email from PaperConflict join ContactInfo using (contactId) where paperId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select tag from PaperTag where paperId=PLACEHOLDER group by paperId
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where leadContactId=u.contactId and conflictType is null) numLeads, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where shepherdContactId=u.contactId and conflictType is null) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, r.overAllMerit from PaperReview r join Paper p on (p.paperId=r.paperId) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) where (pc.conflictType is null or pc.conflictType=0 or r.contactId=PLACEHOLDER) and (p.timeSubmitted>0 or r.reviewSubmitted>0)) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select requestedBy from PaperReview where requestedBy=PLACEHOLDER and contactId!=PLACEHOLDER limit 1
select topicId, interest from TopicInterest where contactId=PLACEHOLDER and interest!=0
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, numReviews, numReviewsSubmitted, numRatings, sumRatings, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, overAllMerit from ContactInfo u left join (select contactId, count(if(reviewNeedsSubmit<=0,reviewSubmitted,reviewId)) numReviews, count(reviewSubmitted) numReviewsSubmitted, reviewSubmitted overAllMerit from PaperReview r join Paper p on (p.paperId=r.paperId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.contactId) as r on (r.contactId=u.contactId) left join (select PaperReview.contactId, count(rating) numRatings, sum(if(rating>0,1,0)) sumRatings from ReviewRating join PaperReview on (PaperReview.paperId=ReviewRating.paperId and PaperReview.reviewId=ReviewRating.reviewId) group by PaperReview.contactId) as rr on (rr.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 order by lastName, firstName, email
select paperStorageId, paperId, timestamp, mimetype, mimetypeid, sha1, documentType, filename, infoJson, size, filterType, originalStorageId from PaperStorage where paperId=PLACEHOLDER and paperStorageIdPLACEHOLDERa
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select optionId, value, data from PaperOption where paperId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, fixability fixabilityScores, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, fixability fixabilityScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select PRP.paperId, PRP.contactId, PRP.preference from PaperReviewPreference PRP join ContactInfo c on (c.contactId=PRP.contactId and c.roles!=0 and (c.roles&1)!=0) join Paper P on (P.paperId=PRP.paperId) left join PaperConflict PC on (PC.paperId=PRP.paperId and PC.contactId=PRP.contactId) where PRP.preference<=PLACEHOLDER and PC.conflictType<=0 and P.timeWithdrawn<=0 and P.timeSubmitted>0 limit 1
select ContactInfo.* from ContactInfo where contactId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER and PaperConflict.conflictType>=PLACEHOLDER) group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where leadContactId=u.contactId and conflictType is null) numLeads, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where shepherdContactId=u.contactId and conflictType is null) numShepherds from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) left join ReviewRating rr on (rr.paperId=r.paperId and rr.reviewId=r.reviewId) where (pc.conflictType is null or pc.conflictType=0 or r.contactId=PLACEHOLDER) and (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER and PaperConflict.conflictType>=PLACEHOLDER) group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.reviewerQualification as reviewerQualification, PaperReview.commentsToAddress as commentsToAddress, PaperReview.paperSummary as paperSummary, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.grammar as grammar, PaperReview.fixability as fixability, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.textField7 as textField7, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, sum(r.numRatings) as numRatings, sum(r.sumRatings) as sumRatings, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where leadContactId=u.contactId and conflictType is null) numLeads, (select count(p.paperId) from Paper p left join PaperConflict c on (c.paperId=p.paperId and c.contactId=PLACEHOLDER) where shepherdContactId=u.contactId and conflictType is null) numShepherds, r.reviewSubmitted as fixability from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, r.fixability, count(rating) as numRatings, sum(if(rating>0,1,0)) as sumRatings from PaperReview r join Paper p on (p.paperId=r.paperId) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) left join ReviewRating rr on (rr.paperId=r.paperId and rr.reviewId=r.reviewId) where (pc.conflictType is null or pc.conflictType=0 or r.contactId=PLACEHOLDER) and (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.reviewId) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=0)) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select paperId from Paper where managerContactId=PLACEHOLDER limit 1
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, PaperReview.commentsToAddress as commentsToAddress, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=0)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=0))) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select ContactInfo.contactId, PaperConflict.conflictType, PaperReview.reviewType, preference as reviewerPreference, expertise as reviewerExpertise, allReviews as allReviews, PRR.paperId as refused from ContactInfo left join PaperConflict on (PaperConflict.contactId=ContactInfo.contactId and PaperConflict.paperId=PLACEHOLDER) left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.paperId=PLACEHOLDER) left join PaperReviewPreference on (PaperReviewPreference.contactId=ContactInfo.contactId and PaperReviewPreference.paperId=PLACEHOLDER) left join (select PaperReview.contactId, reviewType as allReviews from PaperReview join Paper on (Paper.paperId=PaperReview.paperId and timeWithdrawn<=0) group by PaperReview.contactId) as AllReviews on (AllReviews.contactId=ContactInfo.contactId) left join PaperReviewRefused PRR on (PRR.paperId=PLACEHOLDER and PRR.contactId=ContactInfo.contactId) where ContactInfo.roles!=0 and (ContactInfo.roles&1)!=0 group by ContactInfo.contactId
select rating, count(PaperReview.reviewId) from PaperReview join ReviewRating on (PaperReview.contactId=PLACEHOLDER and PaperReview.reviewId=ReviewRating.reviewId) group by rating order by rating desc
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select paperId from PaperConflict where contactId=u.contactId and conflictType>=PLACEHOLDER) paperIds from ContactInfo u group by u.contactId order by lastName, firstName, email
select conflictType as conflict_type, reviewType as review_type, reviewSubmitted as review_submitted, reviewNeedsSubmit as review_needs_submit, PaperReview.contactId as review_token_cid, ContactInfo.contactId from (select PLACEHOLDER paperId) P join ContactInfo left join PaperReview on (PaperReview.paperId=PLACEHOLDER and PaperReview.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=ContactInfo.contactId) where roles!=0 and (roles&1)!=0
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_AllComplete.info Reviews_AllComplete_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where (reviewSubmitted>0) group by paperId) as Reviews_AllComplete on (Reviews_AllComplete.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>=0) and Paper.timeSubmitted>0 group by Paper.paperId
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled from ContactInfo u where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select ContactInfo.contactId, firstName, lastName, email, preferredEmail, password, roles, disabled, contactTags, conflictType, 0 myReviewType from ContactInfo join PaperConflict using (contactId) where paperId=PLACEHOLDER and conflictType>=PLACEHOLDER group by ContactInfo.contactId
select paperId from Paper where leadContactId=PLACEHOLDER limit 1
select Paper.*, PaperConflict.conflictType, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, Reviews_All.info Reviews_All_info, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r group by paperId) as Reviews_All on (Reviews_All.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((Tag_1.tag is not null) and (Reviews>=PLACEHOLDER)) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, APRP.allReviewerPreference, AllConflict.allConflictType from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, fixability fixabilityScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) left join (select paperId, contactId as allReviewerPreference from PaperReviewPreference where paperId in PLACEHOLDER and true group by paperId) as APRP on (APRP.paperId=Paper.paperId) left join (select paperId, contactId as allConflictType from PaperConflict where paperId in PLACEHOLDER and conflictType>0 group by paperId) as AllConflict on (AllConflict.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select ContactInfo.contactId, PaperConflict.conflictType, PaperReview.reviewType, preference as reviewerPreference, expertise as reviewerExpertise, allReviews as allReviews, PRR.paperId as refused from ContactInfo left join PaperConflict on (PaperConflict.contactId=ContactInfo.contactId and PaperConflict.paperId=PLACEHOLDER) left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.paperId=PLACEHOLDER) left join PaperReviewPreference on (PaperReviewPreference.contactId=ContactInfo.contactId and PaperReviewPreference.paperId=PLACEHOLDER) left join (select PaperReview.contactId, reviewType as allReviews from PaperReview join Paper on (Paper.paperId=PaperReview.paperId and timeWithdrawn<=0) group by PaperReview.contactId) as AllReviews on (AllReviews.contactId=ContactInfo.contactId) left join PaperReviewRefused PRR on (PRR.paperId=PLACEHOLDER and PRR.contactId=ContactInfo.contactId) where (ContactInfo.roles&1)!=0 group by ContactInfo.contactId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, fixability fixabilityScores, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 and outcome>0 group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, PaperReviewPreference.preference as reviewerPreference, PaperReviewPreference.expertise as reviewerExpertise, RPC.conflictType reviewerConflictType, RPR.reviewType reviewerReviewType from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join PaperReviewPreference on (PaperReviewPreference.paperId=Paper.paperId and PaperReviewPreference.contactId=PLACEHOLDER) left join PaperConflict RPC on (RPC.paperId=Paper.paperId and RPC.contactId=PLACEHOLDER) left join PaperReview RPR on (RPR.paperId=Paper.paperId and RPR.contactId=PLACEHOLDER) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.suitableForShort as suitableForShort, PaperReview.fixability as fixability, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select paperId, capVersion from Paper where paperId=PLACEHOLDER
select contactId, topicId, interest from TopicInterest where interest!=0 order by contactId
select Paper.paperId, reviewType, reviewId, reviewModified, reviewSubmitted, timeApprovalRequested, reviewNeedsSubmit, reviewOrdinal, reviewBlind, PaperReview.contactId reviewContactId, requestedBy, reviewToken, reviewRound, conflictType from Paper left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) where Paper.paperId in PLACEHOLDER and (PaperReview.contactId is not null or PaperConflict.contactId is not null)
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.fixability as fixability, PaperReview.grammar as grammar, PaperReview.interestToCommunity as interestToCommunity, PaperReview.likelyPresentation as likelyPresentation, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.textField8 as textField8, PaperReview.commentsToPC as commentsToPC, PaperReview.textField7 as textField7, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select straight_join PaperReview.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperReview join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) left join PaperConflict on (PaperConflict.paperId=PaperReview.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperReview.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperReview.paperId) where (PaperConflict.conflictType>=PLACEHOLDER or MyPaperReview.reviewId is not null) and PaperReview.reviewSubmitted<PLACEHOLDER and PaperReview.reviewSubmitted>0 order by PaperReview.reviewSubmitted desc, PaperReview.contactId asc, PaperReview.paperId asc limit PLACEHOLDER
select conflictType as conflict_type, reviewType as review_type, reviewSubmitted as review_submitted, reviewNeedsSubmit as review_needs_submit, PaperReview.contactId as review_token_cid, PLACEHOLDER contactId from (select PLACEHOLDER paperId) P left join PaperReview on (PaperReview.paperId=P.paperId and (PaperReview.contactId=PLACEHOLDER)) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=PLACEHOLDER)
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, fixability fixabilityScores, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Paper.outcome>0) and Paper.timeSubmitted>0 and Paper.outcome>0 group by Paper.paperId
select * from Mimetype where mimetype=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome from Paper where true and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.reviewerQualification as reviewerQualification, PaperReview.commentsToAddress as commentsToAddress, PaperReview.paperSummary as paperSummary, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.grammar as grammar, PaperReview.fixability as fixability, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.textField7 as textField7, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_ExternalApprovable.info Reviews_ExternalApprovable_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where reviewType=PLACEHOLDER and ((reviewSubmitted is null and timeApprovalRequested>0)) group by paperId) as Reviews_ExternalApprovable on (Reviews_ExternalApprovable.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and Paper.timeSubmitted>0 group by Paper.paperId
select ContactInfo.contactId, firstName, lastName, email, password, roles, contactTags, preferredEmail, PaperConflict.conflictType, Paper.paperId, Paper.title, Paper.abstract, Paper.authorInformation, Paper.outcome, Paper.blind, Paper.timeSubmitted, Paper.timeWithdrawn, Paper.shepherdContactId, Paper.capVersion, Paper.managerContactId from ContactInfo join Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=ContactInfo.contactId) where Paper.paperId in PLACEHOLDER and Paper.timeSubmitted>0 and Paper.outcome=PLACEHOLDER and PaperConflict.conflictType>=PLACEHOLDER order by Paper.paperId, email
select ContactInfo.contactId, firstName, lastName, email, password, roles, contactTags, preferredEmail, PaperConflict.conflictType, Paper.paperId, Paper.title, Paper.abstract, Paper.authorInformation, Paper.outcome, Paper.blind, Paper.timeSubmitted, Paper.timeWithdrawn, Paper.shepherdContactId, Paper.capVersion, Paper.managerContactId from ContactInfo join Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=ContactInfo.contactId) where Paper.paperId in PLACEHOLDER and Paper.timeSubmitted>0 and PaperConflict.conflictType>=PLACEHOLDER order by Paper.paperId, email
select distinct tag from PaperTag t join Paper p on (p.paperId=t.paperId) where p.timeSubmitted>0
select straight_join PaperReview.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperReview join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) left join PaperConflict on (PaperConflict.paperId=PaperReview.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperReview.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperReview.paperId) where PaperReview.reviewSubmitted<PLACEHOLDER and PaperReview.reviewSubmitted>0 order by PaperReview.reviewSubmitted desc, PaperReview.contactId asc, PaperReview.paperId asc limit PLACEHOLDER
select PaperReview.*, ContactInfo.firstName, ContactInfo.lastName, ContactInfo.email, ContactInfo.roles as contactRoles, ContactInfo.contactTags, ReqCI.firstName as reqFirstName, ReqCI.lastName as reqLastName, ReqCI.email as reqEmail from PaperReview join ContactInfo using (contactId) left join ContactInfo as ReqCI on (ReqCI.contactId=PaperReview.requestedBy) where PaperReview.paperId=PLACEHOLDER and PaperReview.reviewId=PLACEHOLDER group by PaperReview.reviewId order by PaperReview.paperId, reviewOrdinal, timeRequested, reviewType desc, reviewId
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, numReviews, numReviewsSubmitted, numRatings, sumRatings, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, fixability from ContactInfo u left join (select contactId, count(if(reviewNeedsSubmit<=0,reviewSubmitted,reviewId)) numReviews, count(reviewSubmitted) numReviewsSubmitted, reviewSubmitted fixability from PaperReview r join Paper p on (p.paperId=r.paperId) where (p.timeSubmitted>0 or r.reviewSubmitted>0) group by r.contactId) as r on (r.contactId=u.contactId) left join (select PaperReview.contactId, count(rating) numRatings, sum(if(rating>0,1,0)) sumRatings from ReviewRating join PaperReview on (PaperReview.paperId=ReviewRating.paperId and PaperReview.reviewId=ReviewRating.reviewId) group by PaperReview.contactId) as rr on (rr.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 order by lastName, firstName, email
select topicId from PaperTopic where paperId=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and (PaperConflict.conflictType>=PLACEHOLDER or (Paper.timeWithdrawn<=0 and MyReview.reviewType is not null)) group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.*, PaperConflict.conflictType, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, APRP.allReviewerPreference from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) left join (select paperId, contactId as allReviewerPreference from PaperReviewPreference where true group by paperId) as APRP on (APRP.paperId=Paper.paperId) where timeWithdrawn<=0 group by Paper.paperId order by Paper.paperId
select paperId, tag, tagIndex from PaperTag
select firstName, lastName, affiliation, email, contactId, roles, contactTags, disabled from ContactInfo where (roles&1)!=0
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and (PaperConflict.conflictType>=PLACEHOLDER or (Paper.timeWithdrawn<=0 and MyReview.reviewType is not null)) group by Paper.paperId
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, APRP.allReviewerPreference from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) left join (select paperId, contactId as allReviewerPreference from PaperReviewPreference where paperId in PLACEHOLDER and true group by paperId) as APRP on (APRP.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select any_newpcrev, any_lead, any_shepherd from (select PaperReview.paperId any_newpcrev from PaperReview where reviewType>=PLACEHOLDER and reviewSubmitted is null and reviewNeedsSubmit!=0 and timeRequested>timeRequestNotified limit 1) a left join (select paperId any_lead from Paper where timeSubmitted>0 and leadContactId!=0 limit 1) b on (true) left join (select paperId any_shepherd from Paper where timeSubmitted>0 and shepherdContactId!=0 limit 1) c on (true)
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.fixability as fixability, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select value from Settings where name=PLACEHOLDER
select distinct index_name from information_schema.statistics where table_schema=database() and `table_name`=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.title title, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, Paper.abstract abstract, Paper.authorInformation authorInformation, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((true) or (true) or (true)) and Paper.timeSubmitted>0 group by Paper.paperId
select p.paperId, pt.paperTags, r.reviewType from Paper p left join (select paperId, tag as paperTags from PaperTag where tag > a group by paperId) as pt on (pt.paperId=p.paperId) left join PaperReview r on (r.paperId=p.paperId and r.contactId=PLACEHOLDER) left join PaperConflict pc on (pc.paperId=p.paperId and pc.contactId=PLACEHOLDER) where p.timeSubmitted>0 and (pc.conflictType is null or p.managerContactId=PLACEHOLDER)
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and Paper.timeSubmitted>0 group by Paper.paperId
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled from ContactInfo u where u.roles!=0 and (u.roles&1)!=0 order by lastName, firstName, email
select outcome, count(*) from Paper where timeSubmitted>0 group by outcome
select contactId, topicId, interest from TopicInterest
select paperId from PaperReview where reviewType>PLACEHOLDER and timeRequested>timeRequestNotified and reviewSubmitted is null and reviewNeedsSubmit!=0 limit 1
select u.contactId, r.reviewType from ContactInfo u left join PaperReview r on (r.contactId=u.contactId) left join Paper p on (p.paperId=r.paperId) where p.timeWithdrawn<=0 and p.timeSubmitted>0 and u.roles!=0 and (u.roles&1)!=0 group by u.contactId
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select firstName, lastName, unaccentedName, email, contactId, roles from ContactInfo where email like PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.title title, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.abstract abstract, Paper.authorInformation authorInformation, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (((true) or (true) or (true)) and ((true) or (true) or (true))) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and Paper.timeWithdrawn<=0 and MyReview.reviewType is not null group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId=-1 and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=-1 group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Tag_1.tag is not null) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, count(Tag_2.tag) Tag_2_ct, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join PaperTag as Tag_2 on (Tag_2.paperId=Paper.paperId and (Tag_2.tag=PLACEHOLDER)) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((Tag_1.tag is not null) and (Tag_2.tag is not null)) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, count(Tag_3.tag) Tag_3_ct, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) left join PaperTag as Tag_3 on (Tag_3.paperId=Paper.paperId and (Tag_3.tag=PLACEHOLDER)) where (Tag_3.tag is not null) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select distinct tag from PaperTag t where t.paperId > a
select paperId from PaperConflict where contactId=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and Paper.timeWithdrawn<=0 and MyReview.reviewType is not null group by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.fixability as fixability, PaperReview.paperSummary as paperSummary, PaperReview.strengthOfPaper as strengthOfPaper, PaperReview.textField7 as textField7, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToAddress as commentsToAddress, PaperReview.commentsToPC as commentsToPC, PaperReview.textField8 as textField8, PaperReview.weaknessOfPaper as weaknessOfPaper, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select straight_join PaperReview.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperReview join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) left join PaperConflict on (PaperConflict.paperId=PaperReview.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperReview.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperReview.paperId) where (PaperConflict.conflictType>=PLACEHOLDER or MyPaperReview.reviewId is not null) and (PaperReview.reviewSubmitted<PLACEHOLDER or (PaperReview.reviewSubmitted=PLACEHOLDER and PaperReview.contactId>PLACEHOLDER) or (PaperReview.reviewSubmitted=PLACEHOLDER and PaperReview.contactId=PLACEHOLDER and PaperReview.paperId>PLACEHOLDER)) and PaperReview.reviewSubmitted>0 order by PaperReview.reviewSubmitted desc, PaperReview.contactId asc, PaperReview.paperId asc limit PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, R_submitted.reviewerQualificationScores, R_submitted.reviewContactIds, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select mailId, subject, emailBody from MailLog where fromNonChair=0 order by mailId desc limit PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select straight_join PaperComment.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperComment join ContactInfo on (ContactInfo.contactId=PaperComment.contactId) left join PaperConflict on (PaperConflict.paperId=PaperComment.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperComment.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperComment.paperId) where (PaperConflict.conflictType>=PLACEHOLDER or MyPaperReview.reviewId is not null) and PaperComment.timeModified<PLACEHOLDER order by PaperComment.timeModified desc, PaperComment.contactId asc, PaperComment.paperId asc limit PLACEHOLDER
select straight_join PaperComment.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperComment join ContactInfo on (ContactInfo.contactId=PaperComment.contactId) left join PaperConflict on (PaperConflict.paperId=PaperComment.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperComment.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperComment.paperId) where PaperComment.timeModified<PLACEHOLDER order by PaperComment.timeModified desc, PaperComment.contactId asc, PaperComment.paperId asc limit PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select count(reviewId) num_submitted, overAllMerit scores from ContactInfo left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.reviewSubmitted is not null) where (roles&1)!=0 group by ContactInfo.contactId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.fixabilityScores, PaperReview.fixability, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, fixability fixabilityScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.title title, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.abstract abstract, Paper.authorInformation authorInformation from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (((true) or (true) or (true)) and ((true) or (true) or (true))) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and PaperConflict.conflictType>=PLACEHOLDER group by Paper.paperId
select PRP.paperId, PRP.contactId, PRP.preference from PaperReviewPreference PRP join ContactInfo c on (c.contactId=PRP.contactId and (c.roles&1)!=0) join Paper P on (P.paperId=PRP.paperId) left join PaperConflict PC on (PC.paperId=PRP.paperId and PC.contactId=PRP.contactId) where PRP.preference<=PLACEHOLDER and PC.conflictType<=0 and P.timeWithdrawn<=0 and P.timeSubmitted>0 limit 1
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId in PLACEHOLDER group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.reviewerQualification as reviewerQualification, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select straight_join PaperReview.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from PaperReview join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) left join PaperConflict on (PaperConflict.paperId=PaperReview.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperReview.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperReview.paperId) where (PaperReview.reviewSubmitted<PLACEHOLDER or (PaperReview.reviewSubmitted=PLACEHOLDER and PaperReview.contactId>PLACEHOLDER) or (PaperReview.reviewSubmitted=PLACEHOLDER and PaperReview.contactId=PLACEHOLDER and PaperReview.paperId>PLACEHOLDER)) and PaperReview.reviewSubmitted>0 order by PaperReview.reviewSubmitted desc, PaperReview.contactId asc, PaperReview.paperId asc limit PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and Paper.timeWithdrawn<=0 and MyReview.reviewType is not null group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=0)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=0))) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER or Paper.paperId=PLACEHOLDER or Paper.paperId=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select paperStorageId, sha1, timestamp, size, mimetype from PaperStorage where paperId=PLACEHOLDER and documentType=PLACEHOLDER and sha1=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=-1 and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=-1 group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and (Paper.managerContactId=PLACEHOLDER or Paper.managerContactId=0) and Paper.timeSubmitted>0 group by Paper.paperId
select email from ContactInfo where contactId=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where timeSubmitted>0 and outcome>0 group by Paper.paperId order by Paper.paperId
select reviewOrdinal from PaperReview where paperId=PLACEHOLDER group by paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and (PaperConflict.conflictType>=PLACEHOLDER or Paper.paperId=PLACEHOLDER or Paper.paperId=PLACEHOLDER) group by Paper.paperId
select count(*) from PaperReview where paperId=PLACEHOLDER and (reviewSubmitted>0 or reviewNeedsSubmit>0)
select Paper.paperId, count(pc.contactId) from Paper join PaperConflict c on (c.paperId=Paper.paperId and c.contactId=PLACEHOLDER and c.conflictType>=PLACEHOLDER) join PaperConflict pc on (pc.paperId=Paper.paperId and pc.conflictType>=PLACEHOLDER) group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.reviewerQualification as reviewerQualification, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAddress as commentsToAddress, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select name, ReviewRequest.email, firstName as reqFirstName, lastName as reqLastName, ContactInfo.email as reqEmail, requestedBy, reason, reviewRound from ReviewRequest join ContactInfo on (ContactInfo.contactId=ReviewRequest.requestedBy) where ReviewRequest.paperId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, PaperReviewPreference.preference as reviewerPreference, PaperReviewPreference.expertise as reviewerExpertise, APRP.allReviewerPreference, APRP.desirability as desirability, AllConflict.allConflictType, RPC.conflictType reviewerConflictType, RPR.reviewType reviewerReviewType from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) left join PaperReviewPreference on (PaperReviewPreference.paperId=Paper.paperId and PaperReviewPreference.contactId=PLACEHOLDER) left join (select paperId, contactId as allReviewerPreference, preference as desirability from PaperReviewPreference where true group by paperId) as APRP on (APRP.paperId=Paper.paperId) left join (select paperId, contactId as allConflictType from PaperConflict where conflictType>0 group by paperId) as AllConflict on (AllConflict.paperId=Paper.paperId) left join PaperConflict RPC on (RPC.paperId=Paper.paperId and RPC.contactId=PLACEHOLDER) left join PaperReview RPR on (RPR.paperId=Paper.paperId and RPR.contactId=PLACEHOLDER) where timeSubmitted>0 group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((Paper.outcome>0) or (Tag_1.tag is not null)) and Paper.timeSubmitted>0 group by Paper.paperId
select count(ta.topicId), count(ti.topicId) from TopicArea ta left join TopicInterest ti on (ti.contactId=PLACEHOLDER and ti.topicId=ta.topicId)
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and (PaperConflict.conflictType>=PLACEHOLDER or (Paper.timeWithdrawn<=0 and MyReview.reviewType is not null)) group by Paper.paperId
select outcome, count(paperId) from Paper where timeSubmitted>0 group by outcome
select paperId from PaperTag where tag=PLACEHOLDER limit 1
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome from Paper where (Paper.paperId in PLACEHOLDER) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER and PaperConflict.conflictType>=PLACEHOLDER) left join (select paperId, count(*) count from PaperReview where reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, R_submitted.reviewerQualificationScores, R_submitted.reviewContactIds, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId in PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select straight_join PaperComment.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from (select paperId, commentId from PaperComment where timeModified<PLACEHOLDER order by timeModified desc, contactId asc, paperId asc limit PLACEHOLDER) x join PaperComment using (paperId,commentId) join ContactInfo on (ContactInfo.contactId=PaperComment.contactId) left join PaperConflict on (PaperConflict.paperId=PaperComment.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperComment.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperComment.paperId) order by PaperComment.timeModified desc, PaperComment.contactId asc, PaperComment.paperId asc
select straight_join PaperReview.*, title, timeSubmitted, timeWithdrawn, Paper.blind paperBlind, outcome, managerContactId, leadContactId, ContactInfo.firstName as reviewFirstName, ContactInfo.lastName as reviewLastName, ContactInfo.email as reviewEmail, PaperConflict.conflictType, MyPaperReview.reviewType as myReviewType, MyPaperReview.reviewSubmitted as myReviewSubmitted, MyPaperReview.reviewNeedsSubmit as myReviewNeedsSubmit, MyPaperReview.contactId as myReviewContactId from (select paperId, reviewId from PaperReview where reviewSubmitted>0 and reviewSubmitted<PLACEHOLDER order by reviewSubmitted desc, contactId asc, paperId asc limit PLACEHOLDER) x join PaperReview using (paperId,reviewId) join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) left join PaperConflict on (PaperConflict.paperId=PaperReview.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview as MyPaperReview on (MyPaperReview.paperId=PaperReview.paperId and MyPaperReview.contactId=PLACEHOLDER) join Paper on (Paper.paperId=PaperReview.paperId) order by PaperReview.reviewSubmitted desc, PaperReview.contactId asc, PaperReview.paperId asc
select conflictType as conflict_type, reviewType as review_type, reviewSubmitted as review_submitted, reviewNeedsSubmit as review_needs_submit, PaperReview.contactId as review_token_cid, ContactInfo.contactId from (select PLACEHOLDER paperId) P join ContactInfo left join PaperReview on (PaperReview.paperId=PLACEHOLDER and PaperReview.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=ContactInfo.contactId) where (roles&1)!=0
select PaperReview.*, ContactInfo.firstName, ContactInfo.lastName, ContactInfo.email from PaperReview join ContactInfo on (ContactInfo.contactId=PaperReview.contactId) where PaperReview.paperId=PLACEHOLDER order by reviewOrdinal
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, PaperReview.reviewEditVersion as reviewEditVersion, PaperReview.reviewFormat as reviewFormat, PaperReview.overAllMerit as overAllMerit, PaperReview.fixability as fixability, PaperReview.grammar as grammar, PaperReview.reviewerQualification as reviewerQualification, PaperReview.suitableForShort as suitableForShort, PaperReview.paperSummary as paperSummary, PaperReview.commentsToAuthor as commentsToAuthor, PaperReview.commentsToPC as commentsToPC, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId, PaperReview.reviewId order by Paper.paperId, PaperReview.reviewOrdinal
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where true and MyReview.reviewNeedsSubmit!=0 group by Paper.paperId
select distinct tag from PaperTag t join Paper p on (p.paperId=t.paperId) left join PaperConflict pc on (pc.paperId=t.paperId and pc.contactId=PLACEHOLDER) where p.timeSubmitted>0 and (p.managerContactId=PLACEHOLDER or pc.conflictType is null)
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r left join (select reviewId, count(rating) as nrate_good from ReviewRating where rating>0 group by reviewId) as Ratings_good on (Ratings_good.reviewId=r.reviewId) where nrate_good>0 and r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((Reviews>0)) and Paper.timeSubmitted>0 group by Paper.paperId
select distinct tag from PaperTag t join Paper p on (p.paperId=t.paperId) left join PaperConflict pc on (pc.paperId=t.paperId and pc.contactId=PLACEHOLDER) where p.timeSubmitted>0 and (p.managerContactId=0 or p.managerContactId=PLACEHOLDER or pc.conflictType is null)
select u.contactId, firstName, lastName, email, affiliation, roles, contactTags, voicePhoneNumber, u.collaborators, lastLogin, disabled, (select topicId from TopicInterest where contactId=u.contactId) topicInterest, count(if(r.reviewNeedsSubmit<=0,r.reviewSubmitted,r.reviewId)) as numReviews, count(r.reviewSubmitted) as numReviewsSubmitted, (select count(paperId) from Paper where leadContactId=u.contactId) numLeads, (select count(paperId) from Paper where shepherdContactId=u.contactId) numShepherds, r.reviewSubmitted as overAllMerit from ContactInfo u left join (select r.contactId, r.reviewId, r.reviewSubmitted, r.reviewNeedsSubmit, r.overAllMerit from PaperReview r join Paper p on (p.paperId=r.paperId) where (p.timeSubmitted>0 or r.reviewSubmitted>0)) as r on (r.contactId=u.contactId) where u.roles!=0 and (u.roles&1)!=0 group by u.contactId order by lastName, firstName, email
select contactId, count(preference) from PaperReviewPreference where preference!=0 group by contactId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags, APRP.allReviewerPreference from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) left join (select paperId, contactId as allReviewerPreference from PaperReviewPreference where paperId=PLACEHOLDER and true group by paperId) as APRP on (APRP.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select topicId from PaperTopic where PaperTopic.paperId=Paper.paperId) topicIds, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select contactId, email from ContactInfo where emailPLACEHOLDERa
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.paperId, authorInformation from Paper join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER and PaperConflict.conflictType>=PLACEHOLDER)
select paperId from PaperReview where PaperReview.contactId=PLACEHOLDER group by paperId order by paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r left join (select reviewId, count(rating) as nrate_0 from ReviewRating where rating in PLACEHOLDER group by reviewId) as Ratings_0 on (Ratings_0.reviewId=r.reviewId) where nrate_0>0 and r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((Reviews>0)) and Paper.timeSubmitted>0 group by Paper.paperId
select paperId from PaperComment where PaperComment.contactId=PLACEHOLDER group by paperId order by paperId
select ContactInfo.contactId, PaperConflict.conflictType, reviewType, reviewModified, reviewId from ContactInfo left join PaperConflict on (PaperConflict.contactId=ContactInfo.contactId and PaperConflict.paperId=PLACEHOLDER) left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.paperId=PLACEHOLDER) where ContactInfo.roles!=0 and (ContactInfo.roles&1)!=0
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Reviews_1.info Reviews_1_info, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join (select r.paperId, count(r.reviewId) count, r.reviewId info from PaperReview r where r.contactId=PLACEHOLDER group by paperId) as Reviews_1 on (Reviews_1.paperId=Paper.paperId) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Reviews>0) and MyReview.reviewNeedsSubmit!=0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select topicId, interest from TopicInterest where contactId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.fixabilityScores, R_submitted.overAllMeritScores, R_submitted.reviewContactIds, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) left join (select paperId, count(*) count, fixability fixabilityScores, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.overAllMeritScores, PaperReview.overAllMerit, R_submitted.reviewerQualificationScores, PaperReview.reviewerQualification, R_submitted.reviewContactIds, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count, overAllMerit overAllMeritScores, reviewerQualification reviewerQualificationScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select ContactInfo.contactId, firstName, lastName, email, password, roles, contactTags, preferredEmail, 0 as conflictType, Paper.paperId, Paper.title, Paper.abstract, Paper.authorInformation, Paper.outcome, Paper.blind, Paper.timeSubmitted, Paper.timeWithdrawn, Paper.shepherdContactId, Paper.capVersion, Paper.managerContactId, PaperReview.reviewType, PaperReview.reviewType as myReviewType from ContactInfo join Paper join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=ContactInfo.contactId) where Paper.paperId=PaperReview.paperId and PaperReview.reviewSubmitted is null and PaperReview.reviewNeedsSubmit!=0 and Paper.timeSubmitted>0 order by Paper.paperId, email
select conflictType as conflict_type, reviewType as review_type, reviewSubmitted as review_submitted, reviewNeedsSubmit as review_needs_submit, PaperReview.contactId as review_token_cid, ContactInfo.contactId from (select 1 paperId) P join ContactInfo left join PaperReview on (PaperReview.paperId=PLACEHOLDER and PaperReview.contactId=ContactInfo.contactId) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=ContactInfo.contactId) where roles!=0 and (roles&1)!=0
select PaperStorage.* from FilteredDocument join PaperStorage on (PaperStorage.paperStorageId=FilteredDocument.outDocId) where inDocId=PLACEHOLDER and FilteredDocument.filterType=PLACEHOLDER
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, count(Tag_3.tag) Tag_3_ct from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) left join PaperTag as Tag_3 on (Tag_3.paperId=Paper.paperId and (Tag_3.tag=PLACEHOLDER)) where (Tag_3.tag is not null) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, R_submitted.reviewerQualificationScores, R_submitted.overAllMeritScores, R_submitted.reviewContactIds, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) left join (select paperId, count(*) count, reviewerQualification reviewerQualificationScores, overAllMerit overAllMeritScores, contactId reviewContactIds from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Tag_1.tag is not null) group by Paper.paperId
select contactId from ContactInfo where roles!=0 and (roles&1)!=0 order by lastName, firstName, email
select Paper.*, PaperConflict.conflictType, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewNeedsSubmit>0)) startedReviewCount, (select count(*) from PaperReview where paperId=Paper.paperId and (reviewSubmitted>0 or reviewModified>0)) inProgressReviewCount, R reviewCount, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) left join (select paperId, count(*) count from PaperReview where paperId=PLACEHOLDER and reviewSubmitted>0 group by paperId) R_submitted on (R_submitted.paperId=Paper.paperId) where Paper.paperId=PLACEHOLDER group by Paper.paperId order by Paper.paperId
select reviewRound, count(*) from PaperReview group by reviewRound
select PRP.paperId, PRP.contactId, PRP.preference from PaperReviewPreference PRP join ContactInfo c on (c.contactId=PRP.contactId and c.roles!=0 and (c.roles&1)!=0) join Paper P on (P.paperId=PRP.paperId) left join PaperConflict PC on (PC.paperId=PRP.paperId and PC.contactId=PRP.contactId) where PRP.preference<=PLACEHOLDER and PC.conflictType<=0 and P.timeWithdrawn<=0 limit 1
select paperId from PaperReview where reviewId=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where timeWithdrawn<=0 group by Paper.paperId order by Paper.paperId
select reviewId, reviewType, reviewRound, reviewModified, reviewToken, requestedBy, reviewSubmitted from PaperReview where paperId=PLACEHOLDER and contactId=PLACEHOLDER
select ContactInfo.contactId, firstName, lastName, email, password, roles, contactTags, preferredEmail, 0 as conflictType, -1 as paperId from ContactInfo where (ContactInfo.roles&1)!=0 order by email
select paperId from Paper where timeSubmitted>0 limit 1
select PaperComment.*, firstName reviewFirstName, lastName reviewLastName, email reviewEmail from PaperComment join ContactInfo on (ContactInfo.contactId=PaperComment.contactId) where commentId=PLACEHOLDER order by commentId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, PaperConflict.conflictType conflictType from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=0)) where true and PaperConflict.conflictType>=PLACEHOLDER group by Paper.paperId
select Paper.*, PaperConflict.conflictType, null reviewType, null reviewId, null myReviewType, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=0) where Paper.paperId in PLACEHOLDER group by Paper.paperId order by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, count(Tag_1.tag) Tag_1_ct, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted from Paper left join PaperTag as Tag_1 on (Tag_1.paperId=Paper.paperId and (Tag_1.tag=PLACEHOLDER)) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where (Tag_1.tag is not null) and Paper.timeSubmitted>0 group by Paper.paperId
select paperStorageId from PaperStorage where paperId=PLACEHOLDER and documentType=PLACEHOLDER and sha1=PLACEHOLDER
select Paper.*, PaperConflict.conflictType, PaperReview.reviewType, PaperReview.reviewId, PaperReview.reviewModified, PaperReview.reviewSubmitted, PaperReview.timeApprovalRequested, PaperReview.reviewNeedsSubmit, PaperReview.reviewOrdinal, PaperReview.reviewBlind, PaperReview.reviewToken, PaperReview.timeRequested, PaperReview.contactId as reviewContactId, PaperReview.requestedBy, max(PaperReview.reviewType) as myReviewType, max(PaperReview.reviewSubmitted) as myReviewSubmitted, min(PaperReview.reviewNeedsSubmit) as myReviewNeedsSubmit, PaperReview.contactId as myReviewContactId, PaperReview.reviewRound, (select PaperOption.optionId from PaperOption where paperId=Paper.paperId) optionIds from Paper left join PaperConflict on (PaperConflict.paperId=Paper.paperId and PaperConflict.contactId=PLACEHOLDER) left join PaperReview on (PaperReview.paperId=Paper.paperId and PaperReview.contactId=PLACEHOLDER) where Paper.paperId=-1 group by Paper.paperId order by Paper.paperId
select count(topicId) from TopicInterest where contactId=PLACEHOLDER
select ContactInfo.contactId, count(reviewId) from ContactInfo left join PaperReview on (PaperReview.contactId=ContactInfo.contactId and PaperReview.reviewType>=PLACEHOLDER) where roles!=0 and (roles&1)!=0 group by ContactInfo.contactId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, Paper.title title, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.abstract abstract from Paper left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) where ((true) or (true)) and Paper.timeSubmitted>0 group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome, MyReview.reviewType myReviewType, MyReview.reviewNeedsSubmit myReviewNeedsSubmit, MyReview.reviewSubmitted myReviewSubmitted, Paper.managerContactId managerContactId, Paper.leadContactId leadContactId, PaperConflict.conflictType conflictType, (select tag from PaperTag where PaperTag.paperId=Paper.paperId) paperTags from Paper left join PaperReview as MyReview on (MyReview.paperId=Paper.paperId and ((MyReview.contactId=PLACEHOLDER))) left join PaperConflict as PaperConflict on (PaperConflict.paperId=Paper.paperId and (PaperConflict.contactId=PLACEHOLDER)) where (Paper.paperId in PLACEHOLDER) and Paper.timeWithdrawn<=0 and MyReview.reviewType is not null group by Paper.paperId
select PaperReview.contactId, timeRequested, reviewSubmitted, reviewRound, 0 conflictType from PaperReview where reviewType>PLACEHOLDER or (reviewType=PLACEHOLDER and timeRequested>0 and reviewSubmitted>0)
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome from Paper where true group by Paper.paperId
select Paper.paperId paperId, Paper.timeSubmitted timeSubmitted, Paper.timeWithdrawn timeWithdrawn, Paper.outcome outcome from Paper where (Paper.outcome in PLACEHOLDER) and Paper.timeSubmitted>0 group by Paper.paperId
select name, ReviewRequest.email, firstName as reqFirstName, lastName as reqLastName, ContactInfo.email as reqEmail, requestedBy, reason, reviewRound from ReviewRequest join ContactInfo on (ContactInfo.contactId=ReviewRequest.requestedBy) where ReviewRequest.paperId=PLACEHOLDER and requestedBy=PLACEHOLDER
select conflictType as conflict_type, reviewType as review_type, reviewSubmitted as review_submitted, reviewNeedsSubmit as review_needs_submit, PaperReview.contactId as review_token_cid, PLACEHOLDER contactId from (select 1 paperId) P left join PaperReview on (PaperReview.paperId=P.paperId and (PaperReview.contactId=PLACEHOLDER)) left join PaperConflict on (PaperConflict.paperId=PLACEHOLDER and PaperConflict.contactId=PLACEHOLDER)
select min(Paper.paperId) from Paper where timeSubmitted>0
select * from ContactInfo where contactId=PLACEHOLDER
select topicId, if(interest>0,1,0), count(*) from TopicInterest where interest!=0 group by topicId, interest>0
select * from Capability where salt=PLACEHOLDER
select * from Formula order by lower(name)
select * from ContactInfo where contactDbId=PLACEHOLDER
select paperStorageId, paperId, timestamp, mimetype, mimetypeid, sha1, documentType, filename, infoJson, size, filterType, originalStorageId from PaperStorage where paperStorageIdPLACEHOLDERa
select * from PaperTagAnno where tag=PLACEHOLDER
select * from MailLog where mailId=PLACEHOLDER
select topicId, interest from TopicArea join TopicInterest using (topicId) where contactId=PLACEHOLDER
select min(Paper.paperId) from Paper join ContactInfo on (ContactInfo.paperId=Paper.paperId and ContactInfo.contactId=PLACEHOLDER and ContactInfo.conflictType>=PLACEHOLDER)
select min(Paper.paperId) from Paper join ContactInfo on (ContactInfo.paperId=Paper.paperId and ContactInfo.contactId=0 and ContactInfo.conflictType>=PLACEHOLDER)
select firstName, lastName, affiliation, collaborators from ContactInfo where contactId=PLACEHOLDER
select contactId from ContactInfo where email=PLACEHOLDER
